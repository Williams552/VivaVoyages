@model Order

@{
    ViewData["Title"] = "ViewTourDetails";
}

<div class="container mt-4">
    <div class="row">
        <!-- Tour Information -->
        <div class="col-md-6">
            <div class="card">
                <img src="@Url.Content(@Model.Tour.ImagePath)" alt="Tour Image" class="card-img-top">
                <div class="card-body">
                    <h5 class="card-title">@Model.Tour.TourName</h5>
                    <p class="card-text"><strong>@Model.Tour.Cost</strong>đ/guest</p>
                </div>
                <p>
                    @foreach (var destination in Model.Tour.Destinations)
                    {
                    <p>@destination.Place.PlaceName</p>
                    <p>@destination.Description</p>
                    }
                </p>
            </div>
        </div>

        <!-- Tour Details -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-4">Tour code:</dt>
                        <dd class="col-sm-8">@Model.TourId</dd>

                        <dt class="col-sm-4">Date Start:</dt>
                        <dd class="col-sm-8">@Model.Tour.DateStart</dd>

                        <dt class="col-sm-4">Tour Dates:</dt>
                        <dd class="col-sm-8">@Model.Tour.TourDates</dd>

                        <dt class="col-sm-4">Max Passenger:</dt>
                        <dd class="col-sm-8">@Model.Tour.MaxPasseger</dd>

                        <dt class="col-sm-4">Tour Guide:</dt>
                        <dd class="col-sm-8">@Model.Tour.TourGuide</dd>

                        <dt class="col-sm-4">Single Room:</dt>
                        <dd class="col-sm-8">@Model.Tour.SingleRoomCost</dd>

                        <dt class="col-sm-4">Tax:</dt>
                        <dd class="col-sm-8">@Model.Tour.Tax</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>

    <!-- Customer Information -->
    <div class="card mt-4">
        <div class="card-body">
            <h5 class="card-title">Customer Information</h5>
            <dl class="row">
                <dt class="col-sm-4">Full Name:</dt>
                <dd class="col-sm-8">@Model.Customer.FullName</dd>

                <dt class="col-sm-4">Address:</dt>
                <dd class="col-sm-8">@Model.Customer.Address</dd>

                <dt class="col-sm-4">Phone Number:</dt>
                <dd class="col-sm-8">@Model.Customer.PhoneNumber</dd>

                <dt class="col-sm-4">Gender:</dt>
                <dd class="col-sm-8">@Model.Customer.Gender</dd>

                <dt class="col-sm-4">Date of Birth:</dt>
                <dd class="col-sm-8">@Model.Customer.Dob.ToString("yyyy-MM-dd")</dd>
            </dl>
        </div>
    </div>

    <!-- Passengers Section -->
    <div id="passenger-section" class="mt-4">
        <h3>Passengers</h3>
        <div id="passenger-container">
            <!-- Container for passenger inputs -->
        </div>
        <button type="button" id="addPassenger" class="btn btn-success">Add Passenger</button>
    </div>

    <!-- Book Tour Form -->
    <div class="col-sm-6">
        @if (ViewData["Error"] != null)
        {
            <div class="alert alert-danger">@ViewData["Error"]</div>
        }
        <form id="bookTourForm" method="post" asp-action="Create" asp-controller="Booking">
            <label for="CouponCode">Coupon Code:</label>
            <input type="text" asp-for="CouponCode" class="form-control">
            <input type="hidden" name="TourId" value="@Model.TourId" />
            <input type="hidden" id="passengersJson" name="PassengersJson" />
            <button type="submit" class="btn btn-primary mt-3">Book</button>
        </form>
    </div>

    @section scripts {
        <script>
            $(document).ready(function () {
                var passengersList = []; // Danh sách hành khách

                // Function to add a new set of passenger inputs
                function addPassengerInput(orderId) {
                    var passengerHtml = '<div class="passenger-inputs">' +
                        '<label for="Passengers[' + passengersList.length + '].FullName">Full Name:</label>' +
                        '<input type="text" name="Passengers[' + passengersList.length + '].FullName" class="form-control passenger-name" />' +
                        '<div class="error-message" style="color: red;"></div>' + // Thêm phần tử cho thông báo lỗi
                        '<label for="Passengers[' + passengersList.length + '].Age">Age:</label>' +
                        '<input type="number" name="Passengers[' + passengersList.length + '].Age" class="form-control passenger-age" />' +
                        '<div class="error-message" style="color: red;"></div>' + // Thêm phần tử cho thông báo lỗi
                        '<label for="Passengers[' + passengersList.length + '].Gender">Gender:</label>' +
                        '<div class="gender-radios">' +
                        '   <label><input type="radio" name="Passengers[' + passengersList.length + '].Gender" value="M">Male</label>' +
                        '   <label><input type="radio" name="Passengers[' + passengersList.length + '].Gender" value="F">Female</label>' +
                        '   <label><input type="radio" name="Passengers[' + passengersList.length + '].Gender" value="O">Other</label>' +
                        '</div>' +
                        '<div class="error-message" style="color: red;"></div>' + // Thêm phần tử cho thông báo lỗi
                        '<label for="Passengers[' + passengersList.length + '].SingleRoom">Single Room:</label>' +
                        '<input type="checkbox" name="Passengers[' + passengersList.length + '].SingleRoom" class="passenger-single-room" />' +
                        '<input type="hidden" name="Passengers[' + passengersList.length + '].OrderID" value="' + orderId + '" />' +
                        '<button type="button" class="btn btn-danger btn-sm remove-passenger">Remove</button>' +
                        '</div>';

                    $("#passenger-container").append(passengerHtml);

                    // Create a new passenger object with OrderID and add it to passengersList
                    passengersList.push({
                        FullName: '',
                        Age: 0,
                        Gender: '',
                        SingleRoom: false,
                        OrderID: orderId
                    });
                }

                // Function to check if a passenger has all required information
                function validatePassenger(passengerIndex) {
                    var passenger = passengersList[passengerIndex];
                    var valid = true;

                    if (!passenger.FullName) {
                        $(".passenger-inputs:eq(" + passengerIndex + ") .error-message:eq(0)").html("Please enter full name.");
                        valid = false;
                    } else {
                        $(".passenger-inputs:eq(" + passengerIndex + ") .error-message:eq(0)").html(""); // Clear error message
                    }

                    if (!passenger.Age) {
                        $(".passenger-inputs:eq(" + passengerIndex + ") .error-message:eq(1)").html("Please enter age.");
                        valid = false;
                    } else {
                        $(".passenger-inputs:eq(" + passengerIndex + ") .error-message:eq(1)").html(""); // Clear error message
                    }

                    if (!passenger.Gender) {
                        $(".passenger-inputs:eq(" + passengerIndex + ") .error-message:eq(2)").html("Please select gender.");
                        valid = false;
                    } else {
                        $(".passenger-inputs:eq(" + passengerIndex + ") .error-message:eq(2)").html(""); // Clear error message
                    }

                    return valid;
                }

                // Event handler for the "Add Passenger" button
                $("#addPassenger").click(function () {
                    // Assume you have the current OrderID available (replace 1 with the actual OrderID)
                    var currentOrderId = 1;
                    addPassengerInput(currentOrderId);
                });

                // Event handler for dynamically added "Remove" button
                $(document).on('click', '.remove-passenger', function () {
                    var index = $(this).closest('.passenger-inputs').index();
                    passengersList.splice(index, 1); // Xóa hành khách khỏi danh sách
                    $(this).closest('.passenger-inputs').remove();
                });

                // Event handler for input changes
                $(document).on('input', '.passenger-inputs input', function () {
                    // Update the corresponding property in passengersList
                    var index = $(this).closest('.passenger-inputs').index();
                    var property = $(this).attr('name').split('.')[1];
                    passengersList[index][property] = $(this).val();

                    // Clear error message when input changes
                    $(this).closest('.passenger-inputs').find('.error-message').html("");
                });

                // Event handler for checkbox changes
                $(document).on('change', '.passenger-inputs input[type="checkbox"]', function () {
                    // Update the corresponding property in passengersList
                    var index = $(this).closest('.passenger-inputs').index();
                    var property = $(this).attr('name').split('.')[1];
                    passengersList[index][property] = $(this).prop('checked');

                    // Check if age is under 12 and SingleRoom checkbox is checked
                    var passengerAge = parseInt($(this).closest('.passenger-inputs').find('.passenger-age').val());
                    if (passengerAge < 12 && passengersList[index]['SingleRoom']) {
                        $(this).prop('checked', false); // Uncheck the checkbox
                        $(this).closest('.passenger-inputs').find('.error-message').text("Single rooms are only available for passengers over 12 years old");
                    } else {
                        $(this).closest('.passenger-inputs').find('.error-message').text(""); // Clear error message
                    }
                });

                // Submit form when the "Book" button is clicked
                $('#bookTourForm').submit(function (e) {
                    var isValid = true;

                    // Check if all passengers have valid information
                    for (var i = 0; i < passengersList.length; i++) {
                        if (!validatePassenger(i)) {
                            isValid = false;
                        }
                    }

                    if (!isValid) {
                        e.preventDefault(); // Prevent form submission
                        // Scroll to the first error message
                        $('html, body').animate({
                            scrollTop: $(".error-message:visible:first").offset().top
                        }, 1000);
                    } else {
                        // Update the hidden field with the current passengersList
                        $('#passengersJson').val(JSON.stringify(passengersList));

                        // Continue with form submission
                        return true;
                    }
                });
            });
        </script>
    }
